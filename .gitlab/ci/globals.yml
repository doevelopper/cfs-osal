#         cfs-com/.gitlab/ci/globals.yml
#
#               Copyright (c) 2014-2018 A.H.L
#
#        Permission is hereby granted, free of charge, to any person obtaining
#        a copy of this software and associated documentation files (the
#        "Software"), to deal in the Software without restriction, including
#        without limitation the rights to use, copy, modify, merge, publish,
#        distribute, sublicense, and/or sell copies of the Software, and to
#        permit persons to whom the Software is furnished to do so, subject to
#        the following conditions:
#
#        The above copyright notice and this permission notice shall be
#        included in all copies or substantial portions of the Software.
#
#        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#        EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#        MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#        NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
#        LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
#        OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
#        WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

.define_config: &triggered_by_api_call
    only:
        - triggers

.define_config: &triggered_by_schedules
    only:
        - schedules

.define_config: &triggered_by_api_call_and_schedules
  only:
    - triggers
    - schedules
# -------------------------------------
#          artifacts config
# -------------------------------------

.define_config: &configure_artifacts
    artifacts:
        paths:
            - ${PROJECT_LOG_DIR}/configure.log
        when: always
        expire_in: 7 days # 5 mins  # see https://docs.gitlab.com/ce/ci/yaml/README.html#artifacts-expire_in

.define_config: &build_artifacts
    artifacts:
        paths:
            - ${PROJECT_LOG_DIR}/*.log
        when: always
        expire_in: 7 days

.define_config: &test_artifacts
    artifacts:
        paths:
            - ${PROJECT_LOG_DIR}/test.log
            - ${PROJECT_LOG_DIR}/ci-test.log
            - ${PROJECT_LOG_DIR}/rerun-test.log
        when: always
        expire_in: 7 days

.define_config: &coverage_artifacts
        artifacts:
        paths:
            - ${PROJECT_LOG_DIR}/coverage.log
            - ${PROJECT_LOG_DIR}/*/
        when: always
        expire_in: 7 days

.prerequisites: &prerequisites
    before_script:
        - date
        - echo "Running ${CI_PIPELINE_ID}th $CI_JOB_NAME in stage $CI_JOB_STAGE"
        - export CCACHE_BASEDIR=$CI_PROJECT_DIR
        - export OS_NAME=$(lsb_release -is)
        - export OS_VERS_LONG=$(lsb_release -rs | sed -r "s/^([0-9]+).*/\1/") || true
        - export PROJECT_NAME=$CI_PROJECT_NAME
        - export TAG=$CI_BUILD_REF_NAME
        - export BUILD_DATE=$(date +%Y-%m-%d-%H:%M:%S)
        - export CMAKE_PREFIX_PATH=/opt/Qt5.11.2/5.11.2/gcc_64:$CMAKE_PREFIX_PATH

.only_stable: &only_stable
    only:
        - master
        - /^release-.*$/

.tumbleweed: &tumbleweed
    only:
        - develop

.artifacts: &artifacts
    artifacts:
        name: "${CI_JOB_NAME}_${CI_COMIT_REF_NAME}_${CI_COMMIT_SHA}"
        when: always
        expire_in: 31d
        paths:
            - ${DEPS_INSTALL_DIR}

.Log files: &log_files  [./*.log, ./build/logs/]

# .Build logs: &save_build_logs
#     artifacts:
#         name: log
#         when: always
#         paths:
#             <<: *log_file

.Git Untracked files: &save_untracked_files
    artifacts:
        name: untracked
        paths: [$(pwd)]
        expire_in: 3h45min

.agent-who:
    retry:
        max: 1
        when:
            - unknown_failure
            - api_failure
            - runner_system_failure
    tags:
        # - agent-smith
        # - gitlab-org
        - docker

.default-cache: &default-cache
    key: "dind-${CI_BUILD_REF_NAME}_${CI_BUILD_REF}"
    paths:
        - ${CI_PROJECT_PATH}/.cache

.agent-who-default-cache:
    extends: .agent-who
    cache:
        <<: *default-cache

# Jobs that only need to pull cache
.dedicated-pull-cache-job:
    extends: .agent-who
    cache:
        <<: *default-cache
        policy: pull
    stage: Unit testing

.only_stable:
    only:
        - master
        - /^release-.*$/

.only-code-changes:
    only:
        changes:
        - "Dangerfile"
        - "doc/README.md"  # Some RSpec test rely on this file

.only-review:
    only:
        variables:
            - $CI_SERVER_HOST == "local.scm" && $CI_PROJECT_NAMESPACE == "gitlab.com"
        kubernetes: active
    except:
        refs:
            - master
            - /^\d+-\d+-auto-deploy-\d+$/
            - /^[\d-]+-stable(-ee)?$/

.only-review-schedules:
    only:
        refs:
            - schedules
        variables:
            - $CI_SERVER_HOST == "local.scm" && $CI_PROJECT_NAMESPACE == "gitlab.com"
        kubernetes: active

.tumbleweed:
    only:
        - develop
        - /^feature-.*$/
        - /^hotfix-.*$/
        - /^bugfix-.*$/
        - /^bugfix[/]v[0-9.]*$/
        - /^support-.*$/
#        - /(develop|feature|bugfix|hotfix)\/?(.*)/

.notify:
    image: alpine
    stage: notification
    cache: {}
    before_script:
        - apk update && apk add git curl bash
    only:
        - schedules
    except:
        variables:
            - $CI_SLACK_NOTIFY != "true"
            - $CI_SLACK_WEBHOOK_URL == null
            - $CI_SLACK_CHANNEL == null

.branch_exceptions:
    only:
        - branches
    except:
        - coverity_scan

.armv8l-build-template: &armv8l
    before_script:
        - export PATH=/opt/armv8l-linux-gnueabihf/bin/:$PATH
        - export TRIPLET=armv8l-linux-gnueabihf

.aarch64-build-template: &aarch64
    before_script:
        - export PATH=/opt/aarch64-linux-gnu/bin/:$PATH
        - export TRIPLET=aarch64-linux-gnu

.amd64_variables:
    variables:
        IMAGE_ARCH=amd64

.arm64v8_variables:
    variables:
        IMAGE_ARCH=arm64v8
        HOSTCC=aarch64-linux-gnu-gcc
        HOSTCXX=aarch64-linux-gnu-g++
        TRIPLET=aarch64-linux-gnu
    # - export PATH=/opt/aarch64-linux-gnu/bin/:/opt/armv8l-linux-gnueabihf/bin/:$PATH

.cross_compile_variables: &cross_compile_variables
    CC: ${TRIPLET}-gcc
    CXX: ${TRIPLET}-g++
    NM: ${TRIPLET}-nm
    AR: ${TRIPLET}-ar
    AS: ${TRIPLET}-as
    LD: ${TRIPLET}-ld
    CPP: ${TRIPLET}-cpp
    OBJDUMP: ${TRIPLET}-objdump
    OBJCOPY: ${TRIPLET}-objcopy
    READELF: ${TRIPLET}-readelf
    RANLIB: ${TRIPLET}-ranlib
    GDB: ${TRIPLET}-gdb
    GFORTRAN: ${TRIPLET}-gfortran
    STRINGS: ${TRIPLET}-strings
    SIZE: ${TRIPLET}-size
    GCOV: ${TRIPLET}-gcov
    STRIP: ${TRIPLET}-strip
    GPROF: ${TRIPLET}-gprof
    BUILDTYPE_ARGS: >
        -Dpython=enabled
        -Drtsp_server=enabled

.pre_shared: &pre_shared
    before_script:
        - date
        - docker version || true
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin docker.io
        - echo -e "\033[0;31m****** Starting Gitlab CI-controlled ...******\033[0m"
        - echo -e "\033[0;31m******...continuous integration...******\033[0m"
        - echo -e "\033[0;31m******... continuous deployement...******\033[0m"
        - echo -e "\033[0;31m******... and Continuous Code Quality!******\033[0m"
        - env | sort

.post_shared: &post_shared
    after_script:
        - date
        - docker version  || true
        - docker logout docker.io || true

.variables: &common_variables
#    CI_DEBUG_TRACE: "true"
#    GIT_SUBMODULE_STRATEGY: "none"
#    GIT_STRATEGY: "fetch"
#    GIT_CHECKOUT: "false"
    GIT_DEPTH: "1"
    GIT_SUBMODULE_STRATEGY: "recursive"
    BUILD_DIRECTORY: ${CI_PROJECT_NAME}-build-${BUILD_TYPE}
    BUILD_GENERATOR: "Unix Makefiles"
    GET_SOURCES_ATTEMPTS: "3"
    ARTIFACT_DOWNLOAD_ATTEMPTS: "2"
    CACHE_KEY: '$(if [[ ! -z ${CI_COMMIT_TAG+x} || "${CI_COMMIT_REF_SLUG}" == "prod" ]]; then echo "${CI_COMMIT_REF_SLUG}"; else echo "not-prod-or-tag"; fi)'
    DTR_NAMESPACE: $CI_PROJECT_NAMESPACE
    PROJECT_SOURCE_DIR: "$CI_PROJECT_DIR"
    PROJECT_NAME: $CI_PROJECT_NAME
    TAG: $CI_BUILD_REF_NAME
    ARCH: amd64
    COMMIT_ID: ${CI_COMMIT_SHA:0:8}
    CCACHE_BASEDIR: $CI_PROJECT_DIR
    BUILD_DATE: $(date +%Y-%m-%d-%H:%M:%S)
    COMMIT_TIME: $(git show -s --format=%ct $CI_APPLICATION_TAG)
    DOCKER_TRUSTED_REGISTRY: ${STAGING_REGISTRY}
    STAGING_DIR: $CI_PROJECT_DIR/${CI_PROJECT_NAME}/${BUILD_TYPE}


.application-build-container-prerequisities: &application-build-container-prerequisities
    image: ${BUILD_IMAGE}
    services:
        - docker:dind


.build_template: &build_definition

    before_script:
        - echo "${BUILD_TYPE} mode for ${CI_PROJECT_NAME} : $CI_JOB_STAGE[$CI_JOB_NAME] <->($CI_PIPELINE_ID)"
        - mkdir -p ${STAGING_DIR}
        - curl -s "https://cmake.org/files/v3.16/cmake-3.16.0-rc2-Linux-x86_64.tar.gz" | tar --strip-components=1 -xz -C $HOME/.local
        - export PATH=$HOME/.local/bin:${STAGING_DIR}/bin:$PATH
        - g++ --version
        - cmake --version
        - make --version

    script:
        - >
           if [ ! -d "${BUILD_DIRECTORY}" ]; then
               cmake -E make_directory ${BUILD_DIRECTORY}
           fi
        - cmake -E chdir ${BUILD_DIRECTORY} cmake .. -G "${BUILD_GENERATOR}" -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
                -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_INSTALL_PREFIX=${STAGING_DIR} -DCMAKE_PREFIX_PATH=/usr/local
        - cmake --build ${BUILD_DIRECTORY} --target all --clean-first
        # - cmake --build ${BUILD_DIRECTORY} --target test #-- --gtest_output=xml:${BUILD_DIRECTORY}/${CI_PROJECT_NAME}.xml
        # - cmake --build ${BUILD_DIRECTORY} --target features
        # - cmake --build ${BUILD_DIRECTORY} --target install

    after_script:
        - echo "Building ${BUILD_TYPE} mode done"

    artifacts:
        name: "${CI_BUILD_REF_NAME}_${CI_BUILD_REF}"
        when: on_success
        expire_in: 1 day
        paths:
           - "$BUILD_DIRECTORY/*"

#        - make -C $BUILD_DIRECTORY test ARGS="--extra-verbose"
#        - cmake --build $BUILD_DIRECTORY --target test
#        - ctest $BUILD_DIRECTORY -V --build-and-test
#        - cmake --build $BUILD_DIRECTORY --target test -- ARGS="$TEST_ARGS"
#        - cmake -E env CTEST_OUTPUT_ON_FAILURE=TRUE cmake --build $BUILD_DIRECTORY --target test
#        - cmake --build build --target test -- --gtest_output=xml:tests/result.xml
    # artifacts:
        # paths:

.build-applications:
    image: ${BUILD_IMAGE}
    extends:
        - .agent-who
        - .build_definition

Intro CI:
    stage: Intro
    extends:
        - .docker-hub-dind
    <<: *pre_shared
    script:
        - echo '...'

Outro CI:
    stage: Outro
    extends:
        - .docker-hub-dind
    <<: *post_shared
    script:
        - echo '...'
